//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ComposTux.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProyectosEntities : DbContext
    {
        public ProyectosEntities()
            : base("name=ProyectosEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int spInsCompany(string companyName, string companyAddress, string latitud, string longitud, Nullable<System.Guid> idUser)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("CompanyAddress", companyAddress) :
                new ObjectParameter("CompanyAddress", typeof(string));
    
            var latitudParameter = latitud != null ?
                new ObjectParameter("Latitud", latitud) :
                new ObjectParameter("Latitud", typeof(string));
    
            var longitudParameter = longitud != null ?
                new ObjectParameter("Longitud", longitud) :
                new ObjectParameter("Longitud", typeof(string));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsCompany", companyNameParameter, companyAddressParameter, latitudParameter, longitudParameter, idUserParameter);
        }
    
        public virtual int spInserUser(string playerID, string pushtoken, string userName, string lastName, string name, string email, string password, Nullable<bool> userType, Nullable<bool> privaticy, string latitud, string longitud)
        {
            var playerIDParameter = playerID != null ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(string));
    
            var pushtokenParameter = pushtoken != null ?
                new ObjectParameter("Pushtoken", pushtoken) :
                new ObjectParameter("Pushtoken", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(bool));
    
            var privaticyParameter = privaticy.HasValue ?
                new ObjectParameter("Privaticy", privaticy) :
                new ObjectParameter("Privaticy", typeof(bool));
    
            var latitudParameter = latitud != null ?
                new ObjectParameter("Latitud", latitud) :
                new ObjectParameter("Latitud", typeof(string));
    
            var longitudParameter = longitud != null ?
                new ObjectParameter("Longitud", longitud) :
                new ObjectParameter("Longitud", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInserUser", playerIDParameter, pushtokenParameter, userNameParameter, lastNameParameter, nameParameter, emailParameter, passwordParameter, userTypeParameter, privaticyParameter, latitudParameter, longitudParameter);
        }
    
        public virtual ObjectResult<spSelCompany_Result> spSelCompany(Nullable<System.Guid> idUser)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCompany_Result>("spSelCompany", idUserParameter);
        }
    
        public virtual ObjectResult<spSelToken_Result> spSelToken(Nullable<System.Guid> idUser)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelToken_Result>("spSelToken", idUserParameter);
        }
    
        public virtual ObjectResult<spSelUser_Result> spSelUser(string nameUser, string password)
        {
            var nameUserParameter = nameUser != null ?
                new ObjectParameter("NameUser", nameUser) :
                new ObjectParameter("NameUser", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelUser_Result>("spSelUser", nameUserParameter, passwordParameter);
        }
    
        public virtual int spUpdCompany(string companyName, string companyAddress, string latitud, string longitud, Nullable<System.Guid> idUser, Nullable<System.Guid> companyID)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("CompanyAddress", companyAddress) :
                new ObjectParameter("CompanyAddress", typeof(string));
    
            var latitudParameter = latitud != null ?
                new ObjectParameter("Latitud", latitud) :
                new ObjectParameter("Latitud", typeof(string));
    
            var longitudParameter = longitud != null ?
                new ObjectParameter("Longitud", longitud) :
                new ObjectParameter("Longitud", typeof(string));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(System.Guid));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdCompany", companyNameParameter, companyAddressParameter, latitudParameter, longitudParameter, idUserParameter, companyIDParameter);
        }
    
        public virtual int spUpdToken(Nullable<System.Guid> idUser, string playerId, string pushToken)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(System.Guid));
    
            var playerIdParameter = playerId != null ?
                new ObjectParameter("PlayerId", playerId) :
                new ObjectParameter("PlayerId", typeof(string));
    
            var pushTokenParameter = pushToken != null ?
                new ObjectParameter("PushToken", pushToken) :
                new ObjectParameter("PushToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdToken", idUserParameter, playerIdParameter, pushTokenParameter);
        }
    
        public virtual int spUpdUser(Nullable<System.Guid> idUser, string userName, string lastName, string name, string email, string password, Nullable<bool> userType, Nullable<bool> privaticy, string latitud, string longitud)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(bool));
    
            var privaticyParameter = privaticy.HasValue ?
                new ObjectParameter("Privaticy", privaticy) :
                new ObjectParameter("Privaticy", typeof(bool));
    
            var latitudParameter = latitud != null ?
                new ObjectParameter("Latitud", latitud) :
                new ObjectParameter("Latitud", typeof(string));
    
            var longitudParameter = longitud != null ?
                new ObjectParameter("Longitud", longitud) :
                new ObjectParameter("Longitud", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdUser", idUserParameter, userNameParameter, lastNameParameter, nameParameter, emailParameter, passwordParameter, userTypeParameter, privaticyParameter, latitudParameter, longitudParameter);
        }
    
        public virtual int spInsAssignUserCompany(Nullable<System.Guid> idcompany, Nullable<System.Guid> iduser)
        {
            var idcompanyParameter = idcompany.HasValue ?
                new ObjectParameter("Idcompany", idcompany) :
                new ObjectParameter("Idcompany", typeof(System.Guid));
    
            var iduserParameter = iduser.HasValue ?
                new ObjectParameter("Iduser", iduser) :
                new ObjectParameter("Iduser", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsAssignUserCompany", idcompanyParameter, iduserParameter);
        }
    
        public virtual ObjectResult<spSelAssignUserCompany_Result> spSelAssignUserCompany(Nullable<System.Guid> iduser)
        {
            var iduserParameter = iduser.HasValue ?
                new ObjectParameter("Iduser", iduser) :
                new ObjectParameter("Iduser", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelAssignUserCompany_Result>("spSelAssignUserCompany", iduserParameter);
        }
    
        public virtual ObjectResult<spSelAllCompany_Result> spSelAllCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelAllCompany_Result>("spSelAllCompany");
        }
    }
}
